package main
import "fmt"
// import "time"
// import "sync"
// import "errors"

/**
    内存分配：new 还是 make？什么情况下该用谁？
    程序的运行都需要内存，比如像变量的创建、函数的调用、数据的计算等。所以在需要内存的时候就要申请内存，进行内存分配。在 C/C++ 这类语言中，内存是由开发者自己管理的，需要主动申请和释放，而在 Go 语言中则是由该语言自己管理的，开发者不用做太多干涉，只需要声明变量，Go 语言就会根据变量的类型自动分配相应的内存。
    Go 语言程序所管理的虚拟内存空间会被分为两部分：堆内存和栈内存。栈内存主要由 Go 语言来管理，开发者无法干涉太多，堆内存才是我们开发者发挥能力的舞台，因为程序的数据大部分分配在堆内存上，一个程序的大部分内存占用也是在堆内存上。
    我们常说的 Go 语言的内存垃圾回收是针对堆内存的垃圾回收。
**/
func main(){
    //变量的赋值 如果要对一个变量赋值，这个变量必须有对应的分配好的内存，这样才可以对这块内存操作，完成赋值的目的。
    var s1 string = "amy"
    s2:="amy2"
    fmt.Println(s1,s2)
    // var sp *string //指针类型在声明的时候，Go 语言并没有自动分配内存，所以不能对其进行赋值操作，这和值类型不一样。
    // *sp = "amy3"
    // fmt.Println(*sp)
}
